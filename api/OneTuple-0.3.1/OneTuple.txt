-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Singleton Tuple
--   
--   This package is a compatibility package for a singleton data type
--   
--   <pre>
--   data Solo a = Solo a
--   </pre>
--   
--   Note: it's not a <tt>newtype</tt>
--   
--   <tt>Solo</tt> is available in <tt>base-4.16</tt> (GHC-9.2).
@package OneTuple
@version 0.3.1


-- | <a>Solo</a> fills the <i>tuple gap</i> with a singleton tuple.
--   
--   <a>Solo</a> <i>does not support</i> the usual parenthesized tuple
--   syntax.
--   
--   <a>Solo</a>
--   
--   <ul>
--   <li>has the expected laziness properties</li>
--   <li>can be pattern-matched</li>
--   <li>ships with instances for several standard type classes, including
--   all those supported by H98-standard tuples</li>
--   <li>requires no language extensions, except for hierarchical
--   modules</li>
--   </ul>
--   
--   Note: on GHC-9.0 <a>getSolo</a> is not a record selector.
module Data.Tuple.Solo

-- | Solo is the singleton tuple data type.
data Solo a
Solo :: a -> Solo a
getSolo :: Solo a -> a
instance GHC.Generics.Generic1 Data.Tuple.Solo.Solo
instance GHC.Generics.Generic (Data.Tuple.Solo.Solo a)
instance Data.Data.Data a => Data.Data.Data (Data.Tuple.Solo.Solo a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Tuple.Solo.Solo a)
instance GHC.Enum.Bounded a => GHC.Enum.Bounded (Data.Tuple.Solo.Solo a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Tuple.Solo.Solo a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Tuple.Solo.Solo a)
instance GHC.Show.Show a => GHC.Show.Show (Data.Tuple.Solo.Solo a)
instance GHC.Enum.Enum a => GHC.Enum.Enum (Data.Tuple.Solo.Solo a)
instance GHC.Ix.Ix a => GHC.Ix.Ix (Data.Tuple.Solo.Solo a)
instance Data.Foldable.Foldable Data.Tuple.Solo.Solo
instance Data.Traversable.Traversable Data.Tuple.Solo.Solo
instance GHC.Base.Functor Data.Tuple.Solo.Solo
instance GHC.Base.Applicative Data.Tuple.Solo.Solo
instance GHC.Base.Monad Data.Tuple.Solo.Solo
instance GHC.Base.Semigroup a => GHC.Base.Semigroup (Data.Tuple.Solo.Solo a)
instance GHC.Base.Monoid a => GHC.Base.Monoid (Data.Tuple.Solo.Solo a)
instance Control.Monad.Fix.MonadFix Data.Tuple.Solo.Solo
instance Control.Monad.Zip.MonadZip Data.Tuple.Solo.Solo
instance Data.Functor.Classes.Eq1 Data.Tuple.Solo.Solo
instance Data.Functor.Classes.Ord1 Data.Tuple.Solo.Solo
instance Data.Functor.Classes.Read1 Data.Tuple.Solo.Solo
instance Data.Functor.Classes.Show1 Data.Tuple.Solo.Solo
instance Data.Hashable.Class.Hashable a => Data.Hashable.Class.Hashable (Data.Tuple.Solo.Solo a)
instance Data.Hashable.Class.Hashable1 Data.Tuple.Solo.Solo


-- | This is a module to help migration from <tt>OneTuple</tt> to
--   <tt>Solo</tt>. Migrate to use <a>Data.Tuple</a> from
--   <tt>base-4.16</tt> or <a>Data.Tuple.Solo</a> with all GHCs.
--   
--   The pattern synonym is provided for GHCs supporting pattern synonyms
--   (7.8+)

-- | <i>Deprecated: Use Data.Tuple.Solo</i>
module Data.Tuple.OneTuple
type OneTuple = Solo
pattern OneTuple :: a -> Solo a
only :: OneTuple a -> a


-- | This module provides TH helpers, which use <a>Solo</a> from this
--   package, for 1-tuples.
module Data.Tuple.Solo.TH
tupE :: Monad m => [m Exp] -> m Exp
