-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Cache parts of a Kernmantle pipeline via cas-store
--   
--   Please see the README on GitHub at
--   <a>https://github.com/YPares/kernmantle#readme</a>
@package kernmantle-caching
@version 0.1.0.0

module Control.Kernmantle.Caching

-- | A hash addressed store on the file system.
data ContentStore
class Monad m => ContentHashable (m :: Type -> Type) a

-- | A value directly hashable
type PureHashable = ContentHashable Identity

-- | A value hashable via some IO action
type IOHashable = ContentHashable IO

-- | A class to cache part of the pipeline
class ProvidesCaching eff
usingStore :: (ProvidesCaching eff, ContentHashable IO a, Store b) => eff a b -> eff a b

-- | A class to cache part of the pipeline where the hash can depend on the
--   position of the task in the pipeline
class (ProvidesCaching eff) => ProvidesPosCaching eff
usingStore' :: (ProvidesPosCaching eff, ContentHashable IO a, Store b) => eff a b -> eff a b

-- | An arrow transformer that can automatically determine an identifier
--   from its position in a pipeline. It is isomorphic to a <tt>Reader
--   ArrowIdent ~&gt; arr</tt>, but we need a different Arrow instance than
--   what <a>Cayley</a> provides.
newtype AutoIdent (arr :: Type -> Type -> Type) a b
AutoIdent :: (ArrowIdent -> arr a b) -> AutoIdent (arr :: Type -> Type -> Type) a b
data SomeHashable
[SomePureHashable] :: PureHashable a => a -> SomeHashable
[SomeIOHashable] :: IOHashable a => a -> SomeHashable

-- | Bundles together a store with an identifier for the whole pipeline. If
--   identifier is Nothing, no caching will be performed.
data StoreWithId remoteCacher
StoreWithId :: ContentStore -> remoteCacher -> Maybe Int -> StoreWithId remoteCacher
type LocalStoreWithId = StoreWithId NoCache
type CachingContext = [SomeHashable]

-- | Open the store under the given root and perform the given action.
--   Closes the store once the action is complete
--   
--   See also: <a>open</a>
withStore :: (MonadIO m, MonadMask m) => Path Abs Dir -> (ContentStore -> m a) -> m a

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by an explicit identifier
caching :: (Arrow core, ProvidesCaching core, ContentHashable IO ident, ContentHashable IO a, Store b) => ident -> Rope r mantle core a b -> Rope r mantle core a b

-- | Any rope whose core provides caching can run cached tasks. The task is
--   identified by its position in the pipeline
caching' :: (ProvidesPosCaching core, ContentHashable IO a, Show a, Store b) => Rope r mantle core a b -> Rope r mantle core a b

-- | A <a>StoreWithId</a> with no remote caching
localStoreWithId :: ContentStore -> Maybe Int -> LocalStoreWithId
instance (Control.Monad.IO.Class.MonadIO m, Control.Monad.IO.Unlift.MonadUnliftIO m, Control.Monad.Catch.MonadMask m, Data.CAS.RemoteCache.Cacher m remoteCacher, Data.Profunctor.Trans.HasKleisli m eff) => Control.Kernmantle.Caching.ProvidesCaching (Data.Profunctor.Trans.Reader (Control.Kernmantle.Caching.StoreWithId remoteCacher) Data.Profunctor.Trans.~> eff)
instance (GHC.Base.Functor f, Control.Kernmantle.Caching.ProvidesPosCaching eff) => Control.Kernmantle.Caching.ProvidesPosCaching (f Data.Profunctor.Trans.~> eff)
instance (Control.Arrow.Arrow eff, Control.Kernmantle.Caching.ProvidesPosCaching eff) => Control.Kernmantle.Caching.ProvidesPosCaching (Data.Profunctor.Trans.Writer Control.Kernmantle.Caching.CachingContext Data.Profunctor.Trans.~> eff)
instance (Control.Arrow.Arrow eff, Control.Kernmantle.Caching.ProvidesCaching eff) => Control.Kernmantle.Caching.ProvidesPosCaching (Control.Kernmantle.Arrow.AutoIdent eff)
instance Control.Kernmantle.Caching.ProvidesPosCaching core => Control.Kernmantle.Caching.ProvidesPosCaching (Control.Kernmantle.Rope.Rope r m core)
instance (GHC.Base.Functor f, Control.Kernmantle.Caching.ProvidesCaching eff) => Control.Kernmantle.Caching.ProvidesCaching (f Data.Profunctor.Trans.~> eff)
instance (Control.Arrow.Arrow eff, Control.Kernmantle.Caching.ProvidesCaching eff) => Control.Kernmantle.Caching.ProvidesCaching (Data.Profunctor.Trans.Writer Control.Kernmantle.Caching.CachingContext Data.Profunctor.Trans.~> eff)
instance Control.Kernmantle.Caching.ProvidesCaching eff => Control.Kernmantle.Caching.ProvidesCaching (Control.Kernmantle.Arrow.AutoIdent eff)
instance Control.Kernmantle.Caching.ProvidesCaching core => Control.Kernmantle.Caching.ProvidesCaching (Control.Kernmantle.Rope.Rope r m core)
instance Data.CAS.ContentHashable.ContentHashable GHC.Types.IO Control.Kernmantle.Caching.SomeHashable
instance GHC.Base.Monad m => Data.CAS.ContentHashable.ContentHashable m Control.Kernmantle.Arrow.SplitId
instance GHC.Base.Monad m => Data.CAS.ContentHashable.ContentHashable m Control.Kernmantle.Arrow.ArrowIdent
