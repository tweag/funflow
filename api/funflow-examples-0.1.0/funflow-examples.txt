-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Example applications of the funflow library
--   
--   See README at <a>https://github.com/tweag/funflow/funflow-examples</a>
@package funflow-examples
@version 0.1.0

module Types
type Set = Set

-- | Data Definitions
--   
--   Name of source file
type SourceFile = String

-- | Name of target file
type TargetFile = String

-- | Either source xor target
type BuildFile = String
type Command = String
data MakeFile
[MakeFile] :: {sourceFiles :: Set SourceFile, defaultGoal :: MakeRule, allrules :: Set MakeRule} -> MakeFile
data MakeRule
[MakeRule] :: TargetFile -> Set BuildFile -> Command -> MakeRule
newtype MFError
MFError :: String -> MFError

-- | Accessors
mkRuleTarNm :: MakeRule -> String
instance GHC.Show.Show Types.MakeRule
instance GHC.Classes.Ord Types.MakeRule
instance GHC.Classes.Eq Types.MakeRule
instance GHC.Show.Show Types.MakeFile

module Parse

-- | Extract valid makefile at given path, else <tt>$PWD/Makefile</tt>
--   Result is either a <tt>Left</tt>-wrapped error message or a
--   <tt>Right</tt>-wrapped result.
getValidMakeFile :: Maybe FilePath -> IO (Either MakeFile MFError)

-- | Parsec Stuff
parsecMakeFile :: Parser MakeFile

-- | Top level code
parseMakeFile :: String -> Either ParseError MakeFile
regularParse :: Parser a -> String -> Either ParseError a

-- | Strictly testing
testMakeFileParse :: Maybe FilePath -> IO ()

module Main
type Set = Set
type Map = Map
type FileName = String
type FileContent = String
main :: IO ()

-- | Building A Target
buildTarget :: Path Abs Dir -> MakeFile -> MakeRule -> Flow () (Path Abs File)

-- | Compiles a C file in a docker container.
compileFile :: Path Abs Dir -> Flow (TargetFile, Map SourceFile String, [Path Abs File], Command) (Path Abs File)
newtype Id a b
Id :: Flow a b -> Id a b
[unId] :: Id a b -> Flow a b
flowJoin :: [Id a b] -> Flow [a] [b]
mergeFilesRaw :: Path Abs Dir -> [Path Abs File] -> IO (Content Dir)
mergeFiles :: Path Abs Dir -> Flow [Path Abs File] (Content Dir)
writeExecutableString :: Path Abs Dir -> Flow (String, Path Rel File) (Item, Content File)
findRules :: MakeFile -> [TargetFile] -> Maybe [MakeRule]
putInStoreAt :: (ContentHashable IO a, Typeable t) => Path Abs Dir -> (Path Abs t -> a -> IO ()) -> (a, Path Rel t) -> IO (Item, Content t)
write2Store :: Path Abs Dir -> Flow (Map FileName FileContent) [Path Abs File]
ioContentPath :: Path Abs Dir -> Content t -> IO (Path Abs t)
getRunConfigWithoutFile :: Path Abs Dir -> RunFlowConfig
failGuardFlow :: Flow Bool ()
failNow :: Flow () a
failWith :: Flow String a
msgFlow :: String -> Flow () ()
