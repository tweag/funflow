-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Funflow's internal docker engine client
--   
--   See README at <a>https://github.com/tweag/funflow</a>
@package docker-client
@version 0.1.0


-- | Helper functions for working with Docker images
module Docker.API.Client.Images

-- | Update the name of a docker image, keeping all other fields. For
--   example, you can convert `python:latest` to `perl:latest`.
updateImageName :: Text -> Text -> Text

-- | Update the tag of a docker image, keeping all other fields. For
--   example, you can convert `python:3.7@sha256:11111` to
--   `python:3.7@sha256:22222`. Pass a <a>Nothing</a> to remove the digest
--   field.
updateImageDigest :: Text -> Maybe Text -> Text

-- | Update the tag of a docker image, keeping all other fields. For
--   example, you can convert `python:latest` to `python:3.7`. Pass a
--   <a>Nothing</a> to remove the tag field.
updateImageTag :: Text -> Maybe Text -> Text

-- | Adds a <tt>latest</tt> tag to a Docker image if it does not already
--   have a tag or digest specified, otherwise it returns the input image.
tagImageIfMissing :: Text -> Text


-- | Aeson schemas for communicating with the Docker Engine API
module Docker.API.Client.Internal.Schemas

-- | Constructs default Aeson options for serializing and deserializing
--   objects in this module. This method drops the first nPrefix characters
--   from record accessors in your Haskell record before serializing to
--   JSON and uses the shortened field names to match record accessors when
--   deserializing.
dockerParseOptions :: Int -> Options

-- | A Docker container's unique ID (in longer format)
type ContainerId = String
data CreateContainer
CreateContainer :: Maybe Text -> Maybe [Text] -> Maybe [Text] -> Text -> Maybe Text -> Maybe HostConfig -> CreateContainer
[createContainerUser] :: CreateContainer -> Maybe Text
[createContainerEnv] :: CreateContainer -> Maybe [Text]
[createContainerCmd] :: CreateContainer -> Maybe [Text]
[createContainerImage] :: CreateContainer -> Text
[createContainerWorkingDir] :: CreateContainer -> Maybe Text
[createContainerHostConfig] :: CreateContainer -> Maybe HostConfig
data HostConfig
HostConfig :: Maybe [Text] -> HostConfig
[hostConfigBinds] :: HostConfig -> Maybe [Text]
data CreateContainerResponse
CreateContainerResponse :: ContainerId -> Maybe [Text] -> CreateContainerResponse
[createContainerResponseId] :: CreateContainerResponse -> ContainerId
[createContainerResponseWarnings] :: CreateContainerResponse -> Maybe [Text]
data WaitContainerResponse
WaitContainerResponse :: Int -> Maybe WaitContainerError -> WaitContainerResponse
[waitContainerResponseStatusCode] :: WaitContainerResponse -> Int
[waitContainerResponseError] :: WaitContainerResponse -> Maybe WaitContainerError
data WaitContainerError
WaitContainerError :: Text -> WaitContainerError
[waitContainerErrorMessage] :: WaitContainerError -> Text
instance GHC.Show.Show Docker.API.Client.Internal.Schemas.HostConfig
instance GHC.Generics.Generic Docker.API.Client.Internal.Schemas.HostConfig
instance GHC.Show.Show Docker.API.Client.Internal.Schemas.CreateContainer
instance GHC.Generics.Generic Docker.API.Client.Internal.Schemas.CreateContainer
instance GHC.Show.Show Docker.API.Client.Internal.Schemas.CreateContainerResponse
instance GHC.Generics.Generic Docker.API.Client.Internal.Schemas.CreateContainerResponse
instance GHC.Show.Show Docker.API.Client.Internal.Schemas.WaitContainerError
instance GHC.Generics.Generic Docker.API.Client.Internal.Schemas.WaitContainerError
instance GHC.Show.Show Docker.API.Client.Internal.Schemas.WaitContainerResponse
instance GHC.Generics.Generic Docker.API.Client.Internal.Schemas.WaitContainerResponse
instance Data.Aeson.Types.FromJSON.FromJSON Docker.API.Client.Internal.Schemas.WaitContainerResponse
instance Data.Aeson.Types.ToJSON.ToJSON Docker.API.Client.Internal.Schemas.WaitContainerResponse
instance Data.Aeson.Types.FromJSON.FromJSON Docker.API.Client.Internal.Schemas.WaitContainerError
instance Data.Aeson.Types.ToJSON.ToJSON Docker.API.Client.Internal.Schemas.WaitContainerError
instance Data.Aeson.Types.FromJSON.FromJSON Docker.API.Client.Internal.Schemas.CreateContainerResponse
instance Data.Aeson.Types.ToJSON.ToJSON Docker.API.Client.Internal.Schemas.CreateContainerResponse
instance Data.Aeson.Types.FromJSON.FromJSON Docker.API.Client.Internal.Schemas.CreateContainer
instance Data.Aeson.Types.ToJSON.ToJSON Docker.API.Client.Internal.Schemas.CreateContainer
instance Data.Aeson.Types.FromJSON.FromJSON Docker.API.Client.Internal.Schemas.HostConfig
instance Data.Aeson.Types.ToJSON.ToJSON Docker.API.Client.Internal.Schemas.HostConfig

module Docker.API.Client.Internal.Types

-- | Alias for the system type returned by System.Info.os
newtype OS
OS :: String -> OS

-- | This type describes common errors the docker client might encounter
data DockerClientError

-- | The request to create a new container failed
ContainerCreationFailedError :: String -> DockerClientError

-- | The docker engine API responded with something we didn't expect
UnrecognizedJSONResponseError :: String -> DockerClientError

-- | The docker engine API responded with an error status code when getting
--   a container archive
GetContainerArchiveError :: String -> DockerClientError

-- | The container exited with a nonzero exit code
NonZeroExitCode :: String -> DockerClientError

-- | The docker engine API responded with an error when we attempted to get
--   a container's logs
GetContainerLogsError :: String -> DockerClientError

-- | The docker engine API responded with an error when we attempted to
--   pull an image
ImagePullError :: String -> DockerClientError

-- | Wrapper for composing operations which return an Either
--   DockerClientError a
type ClientErrorMonad a = ExceptT DockerClientError IO a

-- | Describes a docker container to be created with runContainer. Use
--   defaultContainerSpec to get a default value.
data ContainerSpec
ContainerSpec :: Text -> [Text] -> Text -> Text -> [Text] -> [Text] -> ContainerSpec

-- | The image name with an optional tag or digest field (e.g.
--   "python:3.6")
[image] :: ContainerSpec -> Text

-- | The container's command. If empty will default to the image default.
[cmd] :: ContainerSpec -> [Text]

-- | Optional user ID to use in the container. If empty will default to the
--   image default.
[user] :: ContainerSpec -> Text

-- | Optional working directory in the container. If empty will default to
--   the image default.
[workingDir] :: ContainerSpec -> Text

-- | Optional list of environment variables of format "FOO=BAR".
[envVars] :: ContainerSpec -> [Text]

-- | Optional list of host volumes to mount to the container as bind
--   mounts. Must follow the format specied here:
--   <a>https://docs.docker.com/storage/bind-mounts/</a>
[hostVolumes] :: ContainerSpec -> [Text]

-- | Constructs a simple default ContainerSpec for a docker image which
--   uses the image's default values for all other aguments.
defaultContainerSpec :: Text -> ContainerSpec
data ContainerLogType
Stdout :: ContainerLogType
StdErr :: ContainerLogType
Both :: ContainerLogType

-- | Possible types of streams returned by the Docker Engine API attach and
--   logs endpoints. Used only internally for parsing the stream metadata
--   returned by docker.
data DockerStreamType
DockerStreamStdIn :: DockerStreamType
DockerStreamStdOut :: DockerStreamType
DockerStreamStdErr :: DockerStreamType
instance GHC.Generics.Generic Docker.API.Client.Internal.Types.DockerClientError
instance GHC.Show.Show Docker.API.Client.Internal.Types.DockerClientError
instance GHC.Generics.Generic Docker.API.Client.Internal.Types.ContainerSpec
instance GHC.Show.Show Docker.API.Client.Internal.Types.ContainerSpec


-- | HTTP Connection managers and utilities for connecting to the Docker
--   Engine API
module Docker.API.Client.Internal.Connection

-- | Default docker socket path on unix systems
defaultDockerUnixSocket :: FilePath

-- | Creates a new HTTP connection manager for the default docker daemon
--   address on your system.
newDefaultDockerManager :: OS -> IO Manager

-- | Creates a new http connection manager from a file path to a unix
--   socket
newUnixDomainSocketManager :: FilePath -> IO Manager


-- | <tt>Util</tt> contains various utility functions used throughout
--   Docker.API.Client's internals.
module Docker.API.Client.Internal.Util

-- | (Internal only, do not export) Converts a client ContainerSpec into
--   the format expected by the docker api
containerSpecToCreateContainer :: ContainerSpec -> CreateContainer

-- | Conduit helper which checks the length of the input bytestring and
--   reads data from upstream until the length is at least nBytes. Note
--   that this method may return a Bytestring result which has length &gt;=
--   nBytes.
readUpstream :: Monad m => ByteString -> Int -> ConduitT ByteString o m (Maybe ByteString)

-- | Parses the first byte from a stream metadata bytestring returned by
--   the Docker Engine API and returns the corresponding stream type.
getStreamType :: ByteString -> DockerStreamType

-- | Converts an 8 byte section length ByteString into an integer. This
--   value indicates the number of data bytes in the body of a Docker
--   Engine stream record.
getSectionLength :: ByteString -> Int

-- | Parses a docker metadata bytestring of length &gt;= 8 into it's
--   individual components See
--   <a>https://docs.docker.com/engine/api/v1.40/#operation/ContainerAttach</a>
parseDockerStream :: ByteString -> (DockerStreamType, Int, ByteString)

-- | Conduit for parsing a multiplexed stream from the Docker Engine API
--   (e.g. the output of the attatch and logs endpoints). This will force
--   memory usage up to the returned frame size (for docker logs this is
--   usually just one line of text). See
--   <a>https://docs.docker.com/engine/api/v1.40/#operation/ContainerAttach</a>
--   for more details on this format.
parseMultiplexedDockerStream :: MonadIO m => ConduitT ByteString (DockerStreamType, ByteString) m ()

-- | Creates a DockerStreamType filter using the input ContainerLogType
createLogTypeFilter :: ContainerLogType -> (DockerStreamType, a) -> Bool

-- | Replaces the user and group id for an entry in a tarball with the
--   specified user and group
chownTarballContent :: UserID -> GroupID -> FileInfo -> FileInfo


-- | Functions for sending HTTP requests to the Docker Engine API
module Docker.API.Client.Internal.Requests

-- | Docker Engine API version. This value will prefix all docker api url
--   paths.
dockerAPIVersion :: String

-- | Helper function which formats the response of a failed HTTP request
formatRequestError :: Status -> ByteString -> String

-- | Similar to the `docker run` command. Runs a container in the
--   background using the input HTTP connection manager, returning
--   immediately. To wait for the container to exit use
--   <a>awaitContainer</a>. Note that this currently always tries to pull
--   the container's image.
runContainer :: Manager -> ContainerSpec -> ClientErrorMonad ContainerId

-- | Waits on a started container (e.g. via <a>runContainer</a>) until it
--   exits, validating its exit code and returning an
--   <a>DockerClientError</a> if the container exited with an error. This
--   will work for both actively running containers and those which have
--   already exited.
awaitContainer :: Manager -> ContainerId -> ClientErrorMonad ()

-- | Analagous to the `docker cp` command. Recursively copies contents at
--   the specified path in the container to the provided output path on the
--   host, setting file permissions to the specified user and group id.
--   Note that the container must have been started for this to succeed
--   (i.e. it must have a running or finished state). This method uses
--   conduit to optimize memory usage.
saveContainerArchive :: Manager -> UserID -> GroupID -> FilePath -> FilePath -> ContainerId -> ClientErrorMonad ()

-- | Pulls an image from a remote registry (similar to a `docker pull`
--   command). This currently only supports public registries (e.g.
--   DockerHub).
pullImage :: Manager -> Text -> ClientErrorMonad ()

-- | Streams the logs from a docker container into the specified output
--   file path. Logs can include stdout, stderr, or both. Note that if you
--   include both streams, the sorting of the timestamps in the output file
--   may not be perfectly sorted since the stream returned by the docker
--   api is only sorted within each stream type (i.e. stdout and stderr are
--   sorted separately).
saveContainerLogs :: Manager -> ContainerLogType -> FilePath -> ContainerId -> ClientErrorMonad ()

-- | Streams the logs from a docker container, printing them to stdout.
--   Logs can include stdout, stderr, or both.
printContainerLogs :: Manager -> ContainerLogType -> ContainerId -> ClientErrorMonad ()

-- | Attempts to create a docker container, returning the new container's
--   id
submitCreateContainer :: Manager -> CreateContainer -> ClientErrorMonad ByteString
startContainer :: Manager -> ContainerId -> ClientErrorMonad ContainerId
submitWaitContainer :: Manager -> ContainerId -> ClientErrorMonad ByteString

-- | Remove a container, equivalent to the `docker container rm` command
removeContainer :: Manager -> Bool -> Bool -> ContainerId -> ClientErrorMonad ContainerId

-- | Parses the response body of a create container request
parseCreateContainerResult :: ByteString -> ClientErrorMonad ContainerId

-- | Parses the response body of an await container request
parseWaitContainerResult :: ByteString -> ClientErrorMonad WaitContainerResponse

-- | Checks the status code value of a WaitContainerResponse
checkExitStatusCode :: WaitContainerResponse -> ClientErrorMonad ()

module Docker.API.Client

-- | Docker Engine API version. This value will prefix all docker api url
--   paths.
dockerAPIVersion :: String

-- | Alias for the system type returned by System.Info.os
newtype OS
OS :: String -> OS

-- | Default docker socket path on unix systems
defaultDockerUnixSocket :: FilePath

-- | Creates a new HTTP connection manager for the default docker daemon
--   address on your system.
newDefaultDockerManager :: OS -> IO Manager

-- | Creates a new http connection manager from a file path to a unix
--   socket
newUnixDomainSocketManager :: FilePath -> IO Manager

-- | This type describes common errors the docker client might encounter
data DockerClientError

-- | The request to create a new container failed
ContainerCreationFailedError :: String -> DockerClientError

-- | The docker engine API responded with something we didn't expect
UnrecognizedJSONResponseError :: String -> DockerClientError

-- | The docker engine API responded with an error status code when getting
--   a container archive
GetContainerArchiveError :: String -> DockerClientError

-- | The container exited with a nonzero exit code
NonZeroExitCode :: String -> DockerClientError

-- | The docker engine API responded with an error when we attempted to get
--   a container's logs
GetContainerLogsError :: String -> DockerClientError

-- | The docker engine API responded with an error when we attempted to
--   pull an image
ImagePullError :: String -> DockerClientError

-- | Wrapper for composing operations which return an Either
--   DockerClientError a
type ClientErrorMonad a = ExceptT DockerClientError IO a

-- | Describes a docker container to be created with runContainer. Use
--   defaultContainerSpec to get a default value.
data ContainerSpec
ContainerSpec :: Text -> [Text] -> Text -> Text -> [Text] -> [Text] -> ContainerSpec

-- | The image name with an optional tag or digest field (e.g.
--   "python:3.6")
[image] :: ContainerSpec -> Text

-- | The container's command. If empty will default to the image default.
[cmd] :: ContainerSpec -> [Text]

-- | Optional user ID to use in the container. If empty will default to the
--   image default.
[user] :: ContainerSpec -> Text

-- | Optional working directory in the container. If empty will default to
--   the image default.
[workingDir] :: ContainerSpec -> Text

-- | Optional list of environment variables of format "FOO=BAR".
[envVars] :: ContainerSpec -> [Text]

-- | Optional list of host volumes to mount to the container as bind
--   mounts. Must follow the format specied here:
--   <a>https://docs.docker.com/storage/bind-mounts/</a>
[hostVolumes] :: ContainerSpec -> [Text]

-- | Constructs a simple default ContainerSpec for a docker image which
--   uses the image's default values for all other aguments.
defaultContainerSpec :: Text -> ContainerSpec

-- | Similar to the `docker run` command. Runs a container in the
--   background using the input HTTP connection manager, returning
--   immediately. To wait for the container to exit use
--   <a>awaitContainer</a>. Note that this currently always tries to pull
--   the container's image.
runContainer :: Manager -> ContainerSpec -> ClientErrorMonad ContainerId

-- | Analagous to the `docker cp` command. Recursively copies contents at
--   the specified path in the container to the provided output path on the
--   host, setting file permissions to the specified user and group id.
--   Note that the container must have been started for this to succeed
--   (i.e. it must have a running or finished state). This method uses
--   conduit to optimize memory usage.
saveContainerArchive :: Manager -> UserID -> GroupID -> FilePath -> FilePath -> ContainerId -> ClientErrorMonad ()

-- | Remove a container, equivalent to the `docker container rm` command
removeContainer :: Manager -> Bool -> Bool -> ContainerId -> ClientErrorMonad ContainerId

-- | Streams the logs from a docker container into the specified output
--   file path. Logs can include stdout, stderr, or both. Note that if you
--   include both streams, the sorting of the timestamps in the output file
--   may not be perfectly sorted since the stream returned by the docker
--   api is only sorted within each stream type (i.e. stdout and stderr are
--   sorted separately).
saveContainerLogs :: Manager -> ContainerLogType -> FilePath -> ContainerId -> ClientErrorMonad ()
data ContainerLogType
Stdout :: ContainerLogType
StdErr :: ContainerLogType
Both :: ContainerLogType

-- | Pulls an image from a remote registry (similar to a `docker pull`
--   command). This currently only supports public registries (e.g.
--   DockerHub).
pullImage :: Manager -> Text -> ClientErrorMonad ()

-- | Waits on a started container (e.g. via <a>runContainer</a>) until it
--   exits, validating its exit code and returning an
--   <a>DockerClientError</a> if the container exited with an error. This
--   will work for both actively running containers and those which have
--   already exited.
awaitContainer :: Manager -> ContainerId -> ClientErrorMonad ()

-- | Streams the logs from a docker container, printing them to stdout.
--   Logs can include stdout, stderr, or both.
printContainerLogs :: Manager -> ContainerLogType -> ContainerId -> ClientErrorMonad ()
