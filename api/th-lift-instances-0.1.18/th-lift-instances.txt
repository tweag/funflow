-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Lift instances for template-haskell for common data types.
--   
--   Most data types in the haskell platform do not have Lift instances.
--   This package provides orphan instances for containers, text,
--   bytestring and vector. It also provides compat instances for older
--   versions of <tt>template-haskell</tt>
--   
--   Note that <a>th-lift</a> package provides Template Haskell based
--   derivation of <tt>Lift</tt> instances (when you cannot use
--   <tt>DeriveLift</tt> extension), and <a>th-orphans</a> package provides
--   instances for TH datatypes.
@package th-lift-instances
@version 0.1.18

module Instances.TH.Lift
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Tree.Tree a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Functor.Identity.Identity a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Functor.Const.Const a b)
instance Language.Haskell.TH.Syntax.Lift v => Language.Haskell.TH.Syntax.Lift (Data.IntMap.Internal.IntMap v)
instance Language.Haskell.TH.Syntax.Lift Data.IntSet.Internal.IntSet
instance (Language.Haskell.TH.Syntax.Lift k, Language.Haskell.TH.Syntax.Lift v) => Language.Haskell.TH.Syntax.Lift (Data.Map.Internal.Map k v)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Sequence.Internal.Seq a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Set.Internal.Set a)
instance Language.Haskell.TH.Syntax.Lift Data.ByteString.Internal.ByteString
instance Language.Haskell.TH.Syntax.Lift Data.ByteString.Lazy.Internal.ByteString
instance (Data.Primitive.Types.Prim a, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (Data.Vector.Primitive.Vector a)
instance (Foreign.Storable.Storable a, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (Data.Vector.Storable.Vector a)
instance (Data.Vector.Unboxed.Base.Unbox a, Language.Haskell.TH.Syntax.Lift a) => Language.Haskell.TH.Syntax.Lift (Data.Vector.Unboxed.Base.Vector a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Data.Vector.Vector a)
